/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3

/ {
    // Activate ADJUST layer by pressing raise and lower

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <32 31>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <27 28>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <28 29>;
        };

        up {
            bindings = <&kp UP_ARROW>;
            key-positions = <54 15>;
        };

        dowm {
            bindings = <&kp DOWN_ARROW>;
            key-positions = <54 27>;
        };

        left {
            bindings = <&kp LEFT_ARROW>;
            key-positions = <54 26>;
        };

        right {
            bindings = <&kp RIGHT>;
            key-positions = <54 28>;
        };

        delete {
            bindings = <&kp DEL>;
            key-positions = <24 34>;
        };
    };

    behaviors {
        kp_kp_r: kp_kp_r {
            compatible = "zmk,behavior-hold-tap";
            label = "KP_KP_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 50 51 52 53 54 55 56 57>;
            hold-trigger-on-release;
        };

        kp_kp_l: kp_kp_l {
            compatible = "zmk,behavior-hold-tap";
            label = "KP_KP_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 43 44 45 46 47 48 49 55 56 57 58 59 54 53 52>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            flavor = "balanced";
        };

        mo_kp_l: mo_kp_l {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_KP_L";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 43 44 45 46 47 48 49 55 56 57 58 59 54 53 52>;
            tapping-term-ms = <200>;
            hold-trigger-on-release;
            flavor = "balanced";
        };

        for_t: for_t {
            compatible = "zmk,behavior-hold-tap";
            label = "FOR_T";
            bindings = <&hacek>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            hold-trigger-on-release;
            flavor = "tap-preferred";
        };

        for_o: for_o {
            compatible = "zmk,behavior-hold-tap";
            label = "FOR_O";
            bindings = <&l_o>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            hold-trigger-on-release;
            flavor = "tap-preferred";
        };

        for_n: for_n {
            compatible = "zmk,behavior-hold-tap";
            label = "FOR_N";
            bindings = <&hacek>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            hold-trigger-on-release;
            flavor = "tap-preferred";
        };
    };

    macros {
        pswd_fakt: pswd_fakt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp A &kp K &kp T &kp S &kp I &kp L &kp N &kp E &kp H &kp E &kp S &kp L &kp O &kp DOT &kp ENTER>;
            label = "PSWD_FAKT";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        pswd_iz: pswd_iz {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(I) &kp Z &kp LS(N4) &kp LS(N8) &kp LS(DOT) &kp LS(N1) &kp LS(N8) &kp SPACE &kp LS(K) &kp D &kp Y &kp B &kp Y &kp S &kp SPACE &kp T &kp A &kp K &kp SPACE &kp V &kp E &kp N &kp O &kp V &kp A &kp L &kp RET>;
            label = "PSWD_IZ";
            wait-ms = <10>;
            tap-ms = <10>;
        };

        pswd_las: pswd_las {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N3) &kp L &kp A &kp S &kp I &kp S &kp E &kp S &kp E &kp LS(F) &kp L &kp A &kp K &kp A &kp J &kp LA(N2) &kp RET>;
            label = "PSWD_LAS";
            wait-ms = <10>;
            tap-ms = <10>;
        };

        l_o: l_o {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp O>;
            label = "L_O";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        hacek: caps_letter {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&kp LS(EQUAL) &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "CAPS_LETTER";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        del_last_word: del_last_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LEFT_ARROW) &kp BACKSPACE>;
            label = "DEL_LAST_WORD";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // swap C_MUTE & EQUAL for encoder on the right

        default_layer {
            display-name = "default";

            // ------------------------------------------------------------------------------------------------------------
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&gresc            &kp BSLH      &hacek E  &hacek S               &hacek C                 &hacek R                                          &hacek Z    &kp N7                   &kp N8                 &kp N9       &kp N0         &kp LS(EQUAL)
&mt CAPS TAB      &kp Q         &kp W     &kp E                  &kp R                    &for_t T T                                        &kp Y       &kp U                    &kp I                  &for_o 0 O   &kp P          &kp LBKT
&kp LSHFT         &kp A         &kp S     &kp_kp_l LEFT_SHIFT D  &kp_kp_l LEFT_COMMAND F  &kp G                                             &kp H       &kp_kp_r LEFT_COMMAND J  &kp_kp_r LEFT_SHIFT K  &kp L        &kp BACKSPACE  &kp SEMICOLON
&kp LEFT_COMMAND  &mo_kp_l 4 Z  &kp X     &kp C                  &kp V                    &kp B       &kp C_MUTE          &kp GRAVE         &for_n N N  &kp M                    &kp COMMA              &kp DOT      &kp LS(COMMA)  &kp MINUS
                                &mo 3     &kp LALT               &mo 3                    &mo 2       &mo_kp_l 5 SPACE    &mo_kp_l 2 ENTER  &mo 1       &kp FSLH                 &kp LEFT               &kp LA(TAB)
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        znaky {
            display-name = "znaky";

            // TODO: Some binds are waiting for shifted keycode support.
            // ------------------------------------------------------------------------------------------------------------
            // |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |  F12  |
            // |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
            // |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&kp F1      &kp F2        &kp F3        &kp F4         &kp F5        &kp F6                                     &kp F7          &kp F8        &kp F9        &kp F10        &kp F11         &kp F12
&caps_word  &kp DOT       &kp LS(LBKT)  &kp LS(GRAVE)  &kp GRAVE     &kp LG(LESS_THAN)                          &kp CARET       &kp LS(RBKT)  &kp RBKT      &kp PERIOD     &kp PERIOD      &none
&trans      &kp LA(APOS)  &kp LA(N2)    &kp LA(N3)     &kp LA(N4)    &kp LA(N5)                                 &kp LS(PERIOD)  &kp LA(LBKT)  &kp LA(RBKT)  &kp LA(COMMA)  &kp LA(PERIOD)  &kp LA(SEMI)
&trans      &kp LA(N6)    &kp LA(N7)    &kp LA(N8)     &kp LA(FSLH)  &kp LS(APOS)       &none    &kp LS(GRAVE)  &kp UNDERSCORE  &kp LA(N9)    &kp LA(N0)    &none          &none           &none
                          &none         &none          &none         &none              &none    &none          &none           &none         &none         &none
            >;

            sensor-bindings =
                <&inc_dec_kp LEFT_ARROW RIGHT_ARROW>,
                <&inc_dec_kp UP_ARROW DOWN_ARROW>;
        };

        sipky {
            display-name = "adjust";
            bindings = <
&pswd_fakt  &pswd_iz        &pswd_las  &kp DOT       &kp DOT        &kp DOT                                      &none  &none  &none           &none  &none           &none
&kp DOT     &kp DOT         &kp HOME   &kp UP        &kp END        &kp DOT                                      &none  &none  &none           &none  &none           &none
&kp SPACE   &kp LEFT_SHIFT  &kp LEFT   &kp DOWN      &kp RIGHT      &del_last_word                               &none  &none  &kp LEFT_SHIFT  &none  &del_last_word  &none
&kp SPACE   &kp SPACE       &kp SPACE  &kp LA(LEFT)  &kp LA(RIGHT)  &kp SPACE       &kp SPACE    &none           &none  &none  &none           &none  &none           &none
                            &none      &none         &trans         &trans          &none        &kp LEFT_SHIFT  &none  &none  &none           &none
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp PG_UP PG_DN>;
        };

        okna {
            // ----------------------------------------------------------------------------------------------------------------------------
            // | BTCLR  |  BT1    |  BT2    |   BT3   |   BT4   |   BT5   |                  |      |      |       |      |       |       |
            // | EXTPWR | RGB_HUD | RGB_HUI | RGB_SAD | RGB_SAI | RGB_EFF |                  |      |      |       |      |       |       |
            // |        | RGB_BRD | RGB_BRI |         |         |         |                  |      |      |       |      |       |       |
            // |        |         |         |         |         |         | RGB_TOG | |      |      |      |       |      |       |       |
            //                    |         |         |         |         |         | |      |      |      |       |      |

            display-name = "adjust";
            bindings = <
&bt BT_CLR_ALL    &bt BT_SEL 0    &bt BT_SEL 1       &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &none  &none  &none  &none  &none  &none
&kp SPACE         &kp SPACE       &kp SPACE          &kp SPACE     &kp SPACE     &kp SPACE                     &none  &none  &none  &none  &none  &none
&kp LG(LS(X))     &kp LS(LG(UP))  &kp SPACE          &kp SPACE     &kp SPACE     &kp SPACE                     &none  &none  &none  &none  &none  &none
&kp LG(LS(LEFT))  &kp LG(M)       &kp LG(LS(RIGHT))  &kp SPACE     &kp SPACE     &kp SPACE     &none    &none  &none  &none  &none  &none  &none  &none
                                  &none              &none         &trans        &trans        &none    &none  &none  &none  &none  &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        numbers {
            bindings = <
&trans  &trans  &trans      &trans      &trans      &trans                           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &trans                           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LS(N4)  &kp LS(N5)  &kp LS(N6)  &trans                           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(N0)  &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans      &trans      &kp N1      &kp FSLH    &kp MINUS    &trans  &trans  &trans  &trans  &trans
            >;
        };

        prazdne {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
